#!/bin/bash

# explain.sh
# Generate a detailed explanation for a line or block of code
# Arguments:
#   $1: filetype, e.g. go, py, js
#   $2: filepath, the path to the file to edit
#   $3: cursor, either a line number (42) or a range (42-45)
#   $4: prompt (not used)
#   $5: model, the language model to use
#   $6: base path, the base url for the language model, e.g. https://api.openai.com/v1
# Output: Streams a detailed explanation of the code to stdout, commented for the language
# Example: ./explain.sh go ./foo.go 5-10
# butterfish.nvim command: :BFExplain

# This is a script for butterfish.nvim, it accepts arguments from the plugin
# constructs language model prompts, and calls Butterfish to generate a response
# using the OpenAI API. You can modify this script to change the prompt, or
# swap in a different language model.

# Source common.sh from the same directory as this script
source "$(dirname "${BASH_SOURCE[0]}")/common.sh"

parse_arguments "$@"

fullprompt="\"\"\"
$filecontents
\"\"\"

That is a $filetype code file, below is code from that file, the user wants a detailed explanation of that code.

\"\"\"
$fileblock
\"\"\""

sysmsg="You are helping an expert programmer understand code. Every line of your response should be commented in the style of '$filetype' code. Choose the comment style based on your programming language knowledge. For example, with c or go code, every line would be prefixed with '//'. For python or bash code, every line would be prefixed with '#'. Your entire response will go into a code, so make sure every line is commented.

Respond with code comments but be very detailed, explain the purpose of the code, explain how the code works, for example if it uses a library function then explain each argument to that function. Explain the input and output or effects of the code. The user is asking for a detailed analysis of code.

Here is an example analysis:

Code:
func spliceString(mainString, insertString string, index int) string {
    return mainString[:index] + insertString + mainString[index:]
}

Analysis (this example uses golang-style comments):
// The spliceString function takes three arguments:
// mainString  : The original string into which another string will be inserted.
// insertString: The string that will be inserted into mainString.
// index       : The position at which insertString will be inserted into mainString.
//
// The function then returns a new string created by concatenating three substrings:
// 1. The substring of mainString from the beginning to the index.
// 2. The insertString.
// 3. The substring of mainString from the index to the end.
//
// In Go, a string is a read-only slice of bytes, and slicing a string returns a new string. The expression mainString[:index] creates a new string that contains the substring of mainString from the beginning up to (but not including) the index. Similarly, mainString[index:] creates a new string that contains the substring of mainString from the index to the end.
//
// So, the function effectively splices insertString into mainString at the specified index position and returns the modified string.
//
// Examples:
// spliceString(\"Hello, world!\", \"beautiful \", 6) -> \"Hello, beautiful world!\"
// spliceString(\"bar\", \"foo\", 0) -> \"foobar\"
// spliceString(\"bar\", \"foo\", 10) -> throws an error because the index is out of bounds
"

lm_command "$sysmsg" "$fullprompt"

